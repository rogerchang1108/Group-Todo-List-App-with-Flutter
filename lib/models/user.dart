class User {
  String?
      id; // Firestore's local cache mechanism enables optimistic UI updates by immediately writing to the local cache, then synchronizing with the server in the background. There's no need to provide a fallback value for 'id' as it will be generated by Firebase BEFORE the write operation to the local cache. Thus, objects fetched or streamed from the repository always have IDs.
  final String name;
  final String? avatarUrl;
  final String? avatarSvgData;
  final int itemCount;

  User({
    required this.name,
    this.avatarUrl,
    this.avatarSvgData,
  }) : itemCount = 0;

  User._({
    required this.id,
    required this.name,
    this.avatarUrl,
    this.avatarSvgData,
    required this.itemCount,
  });

  factory User.fromMap(Map<String, dynamic> map, String? id) {
    return User._(
      id: id,
      name: map['name'],
      avatarUrl: map['avatarUrl'],
      avatarSvgData: map['avatarSvgData'],
      itemCount: map['itemCount'],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'avatarUrl': avatarUrl,
      'avatarSvgData': avatarSvgData,
      'itemCount': itemCount,
    };
  }
}
